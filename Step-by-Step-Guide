We need a Workstation. In this case, we are using an EC2 Instance with Ubuntu installed in it.

Make sure you have docker, git, minikube, kubectl installed in it.
Cloning the code. #git clone https://github.com/rushi-21776/three-tier-application-deployment-on-kubernetes.git
#sudo apt-get update
#sudo apt install docker.io
#docker ps
#sudo chown $USER /var/run/docker.sock

#curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
#chmod +x ./kubectl
#sudo mv ./kubectl /usr/local/bin
#kubectl version --short --client

Now we will test the frontend by creating a Docker image ie. ReactJS
#cd frontend/
#vi Dockerfile

FROM node:14
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
CMD ["npm","start"]

#docker build -t three-tier-frontend .
#sudo chown $USER /var/run/docker.sock
#docker images
#docker run -d -p 3000:3000 three-tier-frontend:latest

Add port 3000 in AWS machine Security Group
Now we will push the image to AWS ECR(Elastic Container Registry). For this we need to install AWS CLIv2
#curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#sudo apt install unzip
#unzip awscliv2.zip
#sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin --update
#aws configure
Add your Access Key and Secret Access Key.

Now Create a Container Registry in ECR

AWS ---> ECR ---> name(three-tier-frontend) ---> Create ---> View Push commands.
Follow the push commands provided in AWS ECR
#aws er-public get-login-password.........
#docker tag <name>
#docker push


Now we will test the backend by creating a Docker image ie. NodeJS
#cd backend
#vi Dockerfile

FROM node:14
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
CMD ["node","index.js"]

#docker build -t three-tier-backend .
#docker images
#docker run -d -p 8080:8080 three-tier-backend:latest
#docker logs <cintainer_id>
It will show a log that says unable to connect to DB
As of now, we have not created the DB. It means that the backend is working fine

Now push the image to AWS ECR.
AWS ---> ECR ---> name(three-tier-backend) ---> Create ---> View Push commands.
Follow the push commands provided in AWS ECR
#aws er-public get-login-password.........
#docker tag <name>
#docker push

Now install eksctl on the machine. This helps us to control EKS on AWS.
#curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
#chmod +x ./kubectl
#sudo mv ./kubectl /usr/local/bin
#kubectl version --short --client

Now setup EKS cluster using eksctl. In backend it is using AWS CloudFormation
#eksctl create cluster --name three-tier-cluster --region us-west-2 --node-type t2.medium --nodes-min 2 --nodes-max 2
#aws eks update-kubeconfig --region us-west-2 --name three-tier-cluster
#kubectl get nodes

Now bind EKS to kubectl so whenever we use kubectl command it works with our EKS cluster.
#aws eks update-kubeconfig --region us-west-2 --name three-tier-cluster
#kubectl get pods

